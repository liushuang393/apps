name: CI - 音質向上プロジェクト

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # ビルドとテスト
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run TypeScript type check
      run: npx tsc --noEmit

    - name: Run tests
      run: npm test

    - name: Build project
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.node-version }}
        path: dist/

  # コードカバレッジ
  coverage:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests with coverage
      run: npm test -- --coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # コード品質チェック
  code-quality:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run Prettier check
      run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"

    - name: Check for console.log
      run: |
        if grep -r "console\.\(log\|warn\|error\|info\)" src/ --exclude-dir=node_modules --exclude="*.test.ts" --exclude="Logger.ts"; then
          echo "Error: console.* found in source code. Use Logger utility instead."
          exit 1
        fi

    - name: Check file encoding
      run: |
        # UTF-8 BOMなしチェック
        if find src/ -name "*.ts" -exec file {} \; | grep -i "UTF-8.*BOM"; then
          echo "Error: UTF-8 with BOM found. Use UTF-8 without BOM."
          exit 1
        fi

  # セキュリティ監査
  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Run npm audit
      run: npm audit --audit-level=moderate

    - name: Run dependency check
      run: npx depcheck

  # パフォーマンステスト（オプション）
  performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run performance tests
      run: npm run test:performance || echo "Performance tests not configured yet"

  # 通知
  notify:
    runs-on: ubuntu-latest
    needs: [build-and-test, coverage, code-quality, security]
    if: always()

    steps:
    - name: Check job status
      run: |
        if [ "${{ needs.build-and-test.result }}" == "failure" ] || \
           [ "${{ needs.coverage.result }}" == "failure" ] || \
           [ "${{ needs.code-quality.result }}" == "failure" ] || \
           [ "${{ needs.security.result }}" == "failure" ]; then
          echo "CI failed"
          exit 1
        fi

